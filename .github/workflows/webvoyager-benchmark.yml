name: webvoyager-benchmark

on:
  pull_request:
    branches:
      - main

concurrency:
  group: >-
    ${{ github.workflow }}-${{ github.ref }}-
    ${{ github.event.inputs.task_set_name }}-${{ github.event.inputs.model }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  CACHE_TYPE: "pip"

jobs:
  run-benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "DISABLE_TELEMETRY=true" >> $GITHUB_ENV

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.VERTEX_AI }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
            enable-cache: true
            cache-dependency-glob: "uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: ${{ env.CACHE_TYPE }}

      - name: Cache patchright
        id: cache-patchright
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/.cache/patchright
            ~/.local/share/patchright
            ${{ github.workspace }}/.patchright
          key: ${{ runner.os }}-patchright-${{ hashFiles('**/pyproject.toml') }}-playwright1155-ffmpeg1011-v1
          restore-keys: |
            ${{ runner.os }}-patchright-${{ hashFiles('**/pyproject.toml') }}-playwright1155-ffmpeg1011-
            ${{ runner.os }}-patchright-

      - name: Install dependencies
        run: uv sync --dev --all-extras

      - name: Install patchright
        if: steps.cache-patchright.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss - installing patchright"
          uv run patchright install --with-deps chromium  --only-shell

      - name: Run benchmark unit tests
        run: uv run pytest -n logical benchmarks/webvoyager/test_run.py --tb=short

      - name: Zip raw_output_data
        run: |
          if [ -d raw_output_data ]; then
            zip -r raw-output-data.zip raw_output_data
          else
            echo "raw_output_data directory not found!"
            exit 1
          fi

      - name: Upload benchmark raw data artifact
        uses: actions/upload-artifact@v4
        with:
          name: raw-output-data
          path: raw-output-data.zip

      - name: Generate results table
        run: uv run python benchmarks/webvoyager/analysis.py

      - name: Upload md results as step summary
        run: |
          if ls raw_output_data/output_table_*.md 1> /dev/null 2>&1; then
            cat raw_output_data/output_table_*.md >> "$GITHUB_STEP_SUMMARY"
          else
            echo "table file not found!"
            exit 1
          fi
